import{_ as a,c as s,o as n,a4 as e}from"./chunks/framework.B8AjFLjL.js";const m=JSON.parse('{"title":"Git","description":"","frontmatter":{"prev":{"text":"Fetch","link":"/note/fetch"},"next":{"text":"Less","link":"/note/less"}},"headers":[],"relativePath":"note/git.md","filePath":"note/git.md"}'),t={name:"note/git.md"},i=e(`<h1 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h1><h2 id="_1-安装-略" tabindex="-1">1. 安装（略） <a class="header-anchor" href="#_1-安装-略" aria-label="Permalink to &quot;1. 安装（略）&quot;">​</a></h2><h2 id="_2-配置" tabindex="-1">2. 配置 <a class="header-anchor" href="#_2-配置" aria-label="Permalink to &quot;2. 配置&quot;">​</a></h2><ol><li><p>配置name和email</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git config --global user.name &quot;xxxx&quot;</span></span>
<span class="line"><span>git config --global user.email &quot;xxx@xxx.xxx&quot;</span></span></code></pre></div></li></ol><h2 id="_3-使用git" tabindex="-1">3. 使用git： <a class="header-anchor" href="#_3-使用git" aria-label="Permalink to &quot;3. 使用git：&quot;">​</a></h2><ul><li><p>查看当前仓库的状态</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git status</span></span></code></pre></div></li><li><p>初始化仓库</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git init</span></span></code></pre></div></li><li><p>文件状态：</p><ol><li>未跟踪</li><li>已跟踪</li><li>暂存</li><li>未修改</li><li>已修改</li></ol></li><li><p>未跟踪 → 暂存</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git add &lt;filename&gt; 将文件切换到暂存的状态</span></span>
<span class="line"><span>git add * 将所有已修改（未跟踪）的文件暂存</span></span></code></pre></div></li><li><p>暂存 → 未修改</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git commit -m &quot;xxxx&quot; 将暂存的文件存储到仓库中</span></span>
<span class="line"><span>git commit -a -m &quot;xxxx&quot; 提交所有已修改的文件（未跟踪的文件不会提交）</span></span></code></pre></div></li><li><p>未修改 → 修改</p><ul><li>修改代码后，文件会变为修改状态</li></ul></li></ul><h2 id="_4-常用的命令" tabindex="-1">4. 常用的命令 <a class="header-anchor" href="#_4-常用的命令" aria-label="Permalink to &quot;4. 常用的命令&quot;">​</a></h2><ol><li>重置文件</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git restore &lt;filename&gt; # 恢复文件</span></span>
<span class="line"><span>git restore --staged &lt;filename&gt; # 取消暂存状态</span></span></code></pre></div><ol><li>删除文件</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git rm &lt;filename&gt; # 删除文件</span></span>
<span class="line"><span>git rm &lt;filename&gt; -f # 强制删除</span></span></code></pre></div><ol><li>移动文件</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git mv from to # 移动文件 重命名文件</span></span></code></pre></div><h2 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h2><p>git在存储文件时，每一次代码代码的提交都会创建一个与之对应的节点，git就是通过一个一个的节点来记录代码的状态的。节点会构成一个树状结构，树状结构就意味着这个树会存在分支，默认情况下仓库只有一个分支，命名为master。在使用git时，可以创建多个分支，分支与分支之间相互独立，在一个分支上修改代码不会影响其他的分支。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git branch # 查看当前分支</span></span>
<span class="line"><span>git branch &lt;branch name&gt; # 创建新的分支</span></span>
<span class="line"><span>git branch -d &lt;branch name&gt; # 删除分支</span></span>
<span class="line"><span>git switch &lt;branch name&gt; # 切换分支</span></span>
<span class="line"><span>git switch -c &lt;branch name&gt; # 创建并切换分支</span></span>
<span class="line"><span>git merge &lt;branch name&gt; # 和并分支</span></span></code></pre></div><p>在开发中，都是在自己的分支上编写代码，代码编写完成后，在将自己的分支合并到主分支中。</p><h2 id="变基-rebase" tabindex="-1">变基（rebase） <a class="header-anchor" href="#变基-rebase" aria-label="Permalink to &quot;变基（rebase）&quot;">​</a></h2><p>在开发中除了通过merge来合并分支外，还可以通过变基来完成分支的合并。</p><p>我们通过merge合并分支时，在提交记录中会将所有的分支创建和分支合并的过程全部都显示出来，这样当项目比较复杂，开发过程比较波折时，我必须要反复的创建、合并、删除分支。这样一来将会使得我们代码的提交记录变得极为混乱。</p><p>原理（变基时发生了什么）：</p><ol><li>当我们发起变基时，git会首先找到两条分支的最近的共同祖先</li><li>对比当前分支相对于祖先的历史提交，并且将它们提取出来存储到一个临时文件中</li><li>将当前部分指向目标的基底</li><li>以当前基底开始，重新执行历史操作</li></ol><p>变基和merge对于合并分支来说最终的结果是一样的！但是变基会使得代码的提交记录更整洁更清晰！注意！大部分情况下合并和变基是可以互换的，但是如果分支已经提交给了远程仓库，那么这时尽量不要变基。</p><h2 id="远程仓库-remote" tabindex="-1">远程仓库（remote） <a class="header-anchor" href="#远程仓库-remote" aria-label="Permalink to &quot;远程仓库（remote）&quot;">​</a></h2><p>目前我对于git所有操作都是在本地进行的。在开发中显然不能这样的，这时我们就需要一个远程的git仓库。远程的git仓库和本地的本质没有什么区别，不同点在于远程的仓库可以被多人同时访问使用，方便我们协同开发。在实际工作中，git的服务器通常由公司搭建内部使用或是购买一些公共的私有git服务器。我们学习阶段，直接使用一些开放的公共git仓库。目前我们常用的库有两个：GitHub和Gitee（码云）</p><p>将本地库上传git：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git remote add origin https://github.com/lilichao/git-demo.git</span></span>
<span class="line"><span># git remote add &lt;remote name&gt; &lt;url&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git branch -M main</span></span>
<span class="line"><span># 修改分支的名字的为main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git push -u origin main</span></span>
<span class="line"><span># git push 将代码上传服务器上</span></span></code></pre></div><p>将本地库上传gitee：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git remote add gitee https://gitee.com/ymhold/vue-course.git</span></span>
<span class="line"><span>git push -u gitee main</span></span></code></pre></div><h2 id="远程库的操作的命令" tabindex="-1">远程库的操作的命令 <a class="header-anchor" href="#远程库的操作的命令" aria-label="Permalink to &quot;远程库的操作的命令&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git remote # 列出当前的关联的远程库</span></span>
<span class="line"><span>git remote add &lt;远程库名&gt; &lt;url&gt; # 关联远程仓库</span></span>
<span class="line"><span>git remote remove &lt;远程库名&gt;  # 删除远程库</span></span>
<span class="line"><span>git push -u &lt;远程库名&gt; &lt;分支名&gt; # 向远程库推送代码，并和当前分支关联</span></span>
<span class="line"><span>git push &lt;远程库&gt; &lt;本地分支&gt;:&lt;远程分支&gt;</span></span>
<span class="line"><span>git clone &lt;url&gt; # 从远程库下载代码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git push # 如果本地的版本低于远程库，push默认是推不上去</span></span>
<span class="line"><span>git fetch # 要想推送成功，必须先确保本地库和远程库的版本一致，fetch它会从远程仓库下载所有代码，但是它不会将代码和当前分支自动合并</span></span>
<span class="line"><span>		 # 使用fetch拉取代码后，必须要手动对代码进行合并	</span></span>
<span class="line"><span>git pull  # 从服务器上拉取代码并自动合并</span></span></code></pre></div><p>注意：推送代码之前，一定要先从远程库中拉取最新的代码</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>### 		tag 标签</span></span></code></pre></div><ul><li><p>当头指针没有执行某个分支的头部时，这种状态我们称为分离头指针（HEAD detached），分离头指针的状态下也可以操作操作代码，但是这些操作不会出现在任何的分支上，所以注意不要再分离头指针的状态下来操作仓库。</p></li><li><p>如果非得要回到后边的节点对代码进行操作，则可以选择创建分支后再操作</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git switch -c &lt;分支名&gt; &lt;提交id&gt;</span></span></code></pre></div></li><li><p>可以为提交记录设置标签，设置标签以后，可以通过标签快速的识别出不同的开发节点：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git tag</span></span>
<span class="line"><span>git tag 版本</span></span>
<span class="line"><span>git tag 版本 提交id</span></span>
<span class="line"><span>git push 远程仓库 标签名</span></span>
<span class="line"><span>git push 远程仓库 --tags</span></span>
<span class="line"><span>git tag -d 标签名 # 删除标签</span></span>
<span class="line"><span>git push 远程仓库 --delete 标签名 # 删除远程标签</span></span></code></pre></div><h2 id="gitignore" tabindex="-1">gitignore <a class="header-anchor" href="#gitignore" aria-label="Permalink to &quot;gitignore&quot;">​</a></h2></li><li><p>默认情况下，git会监视项目中所有内容，但是有些内容比如node_modules目录中的内容，我们不希望它被git所管理。我们可以在项目目录中添加一个<code>.gitignore</code>文件，来设置那些需要git忽略的文件。</p></li></ul>`,34),p=[i];function l(o,c,g,h,d,r){return n(),s("div",null,p)}const b=a(t,[["render",l]]);export{m as __pageData,b as default};
