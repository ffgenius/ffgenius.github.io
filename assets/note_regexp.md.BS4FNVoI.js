import{_ as t,c as e,o as d,a4 as a}from"./chunks/framework.B8AjFLjL.js";const c=JSON.parse('{"title":"Regexp","description":"","frontmatter":{"prev":{"text":"Sass","link":"/note/sass"},"next":{"text":"Webpack","link":"/note/webpack"}},"headers":[],"relativePath":"note/regexp.md","filePath":"note/regexp.md"}'),l={name:"note/regexp.md"},r=a('<h1 id="regexp" tabindex="-1">Regexp <a class="header-anchor" href="#regexp" aria-label="Permalink to &quot;Regexp&quot;">​</a></h1><h2 id="基础语法" tabindex="-1">基础语法 <a class="header-anchor" href="#基础语法" aria-label="Permalink to &quot;基础语法&quot;">​</a></h2><p>用来处理字符串的规则</p><ul><li>只能处理字符串的</li><li>它是一个规则：可以验证字符串是否符合某个规则，也可以把字符串中符合规则的内容捕获到</li></ul><h2 id="创建对象" tabindex="-1">创建对象 <a class="header-anchor" href="#创建对象" aria-label="Permalink to &quot;创建对象&quot;">​</a></h2><ol><li><p>使用一个正则表达式字面量，其由包含在斜杠之间的模式组成。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span></code></pre></div></li><li><p>调用<code>RegExp</code>对象的构造函数 ，两个参数一个是元字符字符串，一个是修饰符字符串。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d+&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ol><p><strong>区别：</strong> 构造函数因为传递的是字符串，\\需要写两个才代表斜杠。</p><h2 id="修饰符" tabindex="-1">修饰符 <a class="header-anchor" href="#修饰符" aria-label="Permalink to &quot;修饰符&quot;">​</a></h2><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>执行大小写不敏感的匹配。</td></tr><tr><td>g</td><td>执行全局匹配（查找所有匹配）。</td></tr><tr><td>m</td><td>执行多行匹配。</td></tr></tbody></table><h2 id="方括号" tabindex="-1">方括号 <a class="header-anchor" href="#方括号" aria-label="Permalink to &quot;方括号&quot;">​</a></h2><p>方括号用于查找某个范围内的字符：</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间的任何字符。</td></tr><tr><td>[^abc]</td><td>查找任何不在方括号之间的字符。</td></tr><tr><td>[0-9]</td><td>查找任何从 0 至 9 的数字。</td></tr><tr><td>[a-z]</td><td>查找任何小写 a 到小写 z 的字符。</td></tr><tr><td>[A-Z]</td><td>查找任何大写 A 到 大写 Z 的字符。</td></tr><tr><td>[A-z]</td><td>查找任何从大写 A 到小写 z 的字符。</td></tr><tr><td>[adgk]</td><td>查找给定集合内的任何字符。</td></tr><tr><td>[^adgk]</td><td>查找给定集合外的任何字符。</td></tr><tr><td>(a|b|c)</td><td>查找任何指定的选项。</td></tr></tbody></table><h2 id="元字符" tabindex="-1">元字符 <a class="header-anchor" href="#元字符" aria-label="Permalink to &quot;元字符&quot;">​</a></h2><p>元字符（Metacharacter）是拥有特殊含义的字符：</p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>查找单个字符，除了换行和行结束符。</td></tr><tr><td>\\w</td><td>查找单词字符。</td></tr><tr><td>\\W</td><td>查找非单词字符。</td></tr><tr><td>\\d</td><td>查找数字。</td></tr><tr><td>\\D</td><td>查找非数字字符。</td></tr><tr><td>\\s</td><td>查找空白字符。</td></tr><tr><td>\\S</td><td>查找非空白字符。</td></tr><tr><td>\\b</td><td>匹配单词边界。</td></tr><tr><td>\\B</td><td>匹配非单词边界。</td></tr><tr><td>\\0</td><td>查找 NUL 字符。</td></tr><tr><td>\\n</td><td>查找换行符。</td></tr><tr><td>\\f</td><td>查找换页符。</td></tr><tr><td>\\r</td><td>查找回车符。</td></tr><tr><td>\\t</td><td>查找制表符。</td></tr><tr><td>\\v</td><td>查找垂直制表符。</td></tr><tr><td>\\xxx</td><td>查找以八进制数 xxx 规定的字符。</td></tr><tr><td>\\xdd</td><td>查找以十六进制数 dd 规定的字符。</td></tr><tr><td>\\uxxxx</td><td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><h2 id="量词" tabindex="-1">量词 <a class="header-anchor" href="#量词" aria-label="Permalink to &quot;量词&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">量词</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">n+</td><td style="text-align:left;">匹配任何包含至少一个 n 的字符串。</td></tr><tr><td style="text-align:left;">n*</td><td style="text-align:left;">匹配任何包含零个或多个 n 的字符串。</td></tr><tr><td style="text-align:left;">n?</td><td style="text-align:left;">匹配任何包含零个或一个 n 的字符串。</td></tr><tr><td style="text-align:left;"><code>n{X}</code></td><td style="text-align:left;">匹配包含 X 个 n 的序列的字符串。</td></tr><tr><td style="text-align:left;"><code>n{X,Y}</code></td><td style="text-align:left;">匹配包含 X 至 Y 个 n 的序列的字符串。</td></tr><tr><td style="text-align:left;"><code>n{X,}</code></td><td style="text-align:left;">匹配包含至少 X 个 n 的序列的字符串。</td></tr><tr><td style="text-align:left;">n$</td><td style="text-align:left;">匹配任何结尾为 n 的字符串。</td></tr><tr><td style="text-align:left;">^n</td><td style="text-align:left;">匹配任何开头为 n 的字符串。</td></tr><tr><td style="text-align:left;">?=n</td><td style="text-align:left;">匹配任何其后紧接指定字符串 n 的字符串。</td></tr><tr><td style="text-align:left;">?!n</td><td style="text-align:left;">匹配任何其后没有紧接指定字符串 n 的字符串。</td></tr></tbody></table><h2 id="regexp-对象属性" tabindex="-1">RegExp 对象属性 <a class="header-anchor" href="#regexp-对象属性" aria-label="Permalink to &quot;RegExp 对象属性&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">global</td><td style="text-align:left;">RegExp 对象是否具有标志 g。</td></tr><tr><td style="text-align:left;">ignoreCase</td><td style="text-align:left;">RegExp 对象是否具有标志 i。</td></tr><tr><td style="text-align:left;">lastIndex</td><td style="text-align:left;">一个整数，标示开始下一次匹配的字符位置。</td></tr><tr><td style="text-align:left;">multiline</td><td style="text-align:left;">RegExp 对象是否具有标志 m。</td></tr><tr><td style="text-align:left;">source</td><td style="text-align:left;">正则表达式的源文本。</td></tr></tbody></table><h2 id="regexp-对象方法" tabindex="-1">RegExp 对象方法 <a class="header-anchor" href="#regexp-对象方法" aria-label="Permalink to &quot;RegExp 对象方法&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">compile</td><td style="text-align:left;">编译正则表达式。</td></tr><tr><td style="text-align:left;">exec</td><td style="text-align:left;">检索字符串中指定的值。返回找到的值，并确定其位置。</td></tr><tr><td style="text-align:left;">test</td><td style="text-align:left;">检索字符串中指定的值。返回 true 或 false。</td></tr></tbody></table><h2 id="支持正则表达式的-string-对象的方法" tabindex="-1">支持正则表达式的 String 对象的方法 <a class="header-anchor" href="#支持正则表达式的-string-对象的方法" aria-label="Permalink to &quot;支持正则表达式的 String 对象的方法&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">search</td><td style="text-align:left;">检索与正则表达式相匹配的值。</td></tr><tr><td style="text-align:left;">match</td><td style="text-align:left;">找到一个或多个正则表达式的匹配。</td></tr><tr><td style="text-align:left;">replace</td><td style="text-align:left;">替换与正则表达式匹配的子串。</td></tr><tr><td style="text-align:left;">split</td><td style="text-align:left;">把字符串分割为字符串数组。</td></tr></tbody></table>',23),i=[r];function s(n,h,g,o,p,x){return d(),e("div",null,i)}const k=t(l,[["render",s]]);export{c as __pageData,k as default};
